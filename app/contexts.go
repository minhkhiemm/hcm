// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hcm": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/minhkhiemm/hcm/design
// --out=$(GOPATH)/src/github.com/minhkhiemm/hcm
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/satori/go.uuid"
	"net/http"
	"time"
)

// CreatePartientsContext provides the partients create action context.
type CreatePartientsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreatePartientsPayload
}

// NewCreatePartientsContext parses the incoming request URL and body, performs validations and creates the
// context used by the partients controller create action.
func NewCreatePartientsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreatePartientsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreatePartientsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createPartientsPayload is the partients create action payload.
type createPartientsPayload struct {
	// date of birth
	DateOfBirth *time.Time `form:"date_of_birth,omitempty" json:"date_of_birth,omitempty" yaml:"date_of_birth,omitempty" xml:"date_of_birth,omitempty"`
	// id for patient is unique uuid
	ID *uuid.UUID `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// name of patient
	Name *string `form:"name,omitempty" json:"name,omitempty" yaml:"name,omitempty" xml:"name,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createPartientsPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Publicize creates CreatePartientsPayload from createPartientsPayload
func (payload *createPartientsPayload) Publicize() *CreatePartientsPayload {
	var pub CreatePartientsPayload
	if payload.DateOfBirth != nil {
		pub.DateOfBirth = payload.DateOfBirth
	}
	if payload.ID != nil {
		pub.ID = payload.ID
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	return &pub
}

// CreatePartientsPayload is the partients create action payload.
type CreatePartientsPayload struct {
	// date of birth
	DateOfBirth *time.Time `form:"date_of_birth,omitempty" json:"date_of_birth,omitempty" yaml:"date_of_birth,omitempty" xml:"date_of_birth,omitempty"`
	// id for patient is unique uuid
	ID *uuid.UUID `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// name of patient
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreatePartientsPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreatePartientsContext) Created() error {
	ctx.ResponseData.WriteHeader(201)
	return nil
}

// ListPartientsContext provides the partients list action context.
type ListPartientsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListPartientsContext parses the incoming request URL and body, performs validations and creates the
// context used by the partients controller list action.
func NewListPartientsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPartientsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPartientsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPartientsContext) OK(r PatientCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.patient+json; type=collection")
	}
	if r == nil {
		r = PatientCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
