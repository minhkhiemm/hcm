// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hcm": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/minhkhiemm/hcm/design
// --out=$(GOPATH)/src/github.com/minhkhiemm/hcm
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// PartientsController is the controller interface for the Partients actions.
type PartientsController interface {
	goa.Muxer
	Create(*CreatePartientsContext) error
	List(*ListPartientsContext) error
}

// MountPartientsController "mounts" a Partients resource controller on the given service.
func MountPartientsController(service *goa.Service, ctrl PartientsController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreatePartientsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreatePartientsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/v1/patients/", ctrl.MuxHandler("create", h, unmarshalCreatePartientsPayload))
	service.LogInfo("mount", "ctrl", "Partients", "action", "Create", "route", "POST /v1/patients/")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListPartientsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	service.Mux.Handle("GET", "/v1/patients/", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Partients", "action", "List", "route", "GET /v1/patients/")
}

// unmarshalCreatePartientsPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreatePartientsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createPartientsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
