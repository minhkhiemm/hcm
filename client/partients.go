// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "hcm": partients Resource Client
//
// Command:
// $ goagen
// --design=github.com/minhkhiemm/hcm/design
// --out=$(GOPATH)/src/github.com/minhkhiemm/hcm
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
	"time"
)

// CreatePartientsPayload is the partients create action payload.
type CreatePartientsPayload struct {
	// date of birth
	DateOfBirth *time.Time `form:"date_of_birth,omitempty" json:"date_of_birth,omitempty" yaml:"date_of_birth,omitempty" xml:"date_of_birth,omitempty"`
	// id for patient is unique uuid
	ID *uuid.UUID `form:"id,omitempty" json:"id,omitempty" yaml:"id,omitempty" xml:"id,omitempty"`
	// name of patient
	Name string `form:"name" json:"name" yaml:"name" xml:"name"`
}

// CreatePartientsPath computes a request path to the create action of partients.
func CreatePartientsPath() string {

	return fmt.Sprintf("/v1/patients/")
}

// CreatePartients makes a request to the create action endpoint of the partients resource
func (c *Client) CreatePartients(ctx context.Context, path string, payload *CreatePartientsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreatePartientsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreatePartientsRequest create the request corresponding to the create action endpoint of the partients resource.
func (c *Client) NewCreatePartientsRequest(ctx context.Context, path string, payload *CreatePartientsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ListPartientsPath computes a request path to the list action of partients.
func ListPartientsPath() string {

	return fmt.Sprintf("/v1/patients/")
}

// ListPartients makes a request to the list action endpoint of the partients resource
func (c *Client) ListPartients(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListPartientsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListPartientsRequest create the request corresponding to the list action endpoint of the partients resource.
func (c *Client) NewListPartientsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
